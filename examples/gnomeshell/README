Bitergia Report Methodology
---------------------------
Based on the criteria proposed in "Reproducibility of empirical software":
http://www.springerlink.com/content/j501w21183375u1r/?MUD=MP

SCM: Source Code Management
ITS: Issue Tracking System

* Data source: GNOME Shell repository

- SCM: git://git.gnome.org/gnome-shell
- ITS: https://bugzilla.gnome.org, GNOME Shell product

* Retrieval Methodology

- SCM: git clone git://git.gnome.org/gnome-shell
- ITS: 
bicho --db-user-out=root --db-password-out="" --db-database-out=bichognomeshell -d 5 -b bg -u \ 
https://bugzilla.gnome.org/buglist.cgi?product=gnome-shell

* Raw dataset

- SCM: Git clone local repository
- ITS: Issues are not copied in raw mode.

* Extraction methodology

- SCM: cvsanaly2 -u root -d cvsanalygnomeshell --extensions=CommitsLOC,CommitsLOCDet,Months
- ITS: Already done by Bicho

* Study paramenters

- Git repository: commits
- Issues downloaded: issues open and closed

* Processed dataset

- cvsanaly2 and bicho databases: cvsanalygnomeshell, bichognomeshell

* Analysis methodology

Extract a timeline for commits, open and close issues with GNOME releases. Use MySQL and R for the analysis.

- SCM: R --no-restore --no-save --args cvsanalygnomeshell dbuser dbpasswd < scm-analysis.R > script.out
- ITS: R --no-restore --no-save --args bichognomeshell dbuser bdpasswd < its-analysis.R > script.out 

* Results dataset

JSON files with time series with the study parameters use for visualization.

- SCM: commits-timeserie.json
- ITS: its-timeserie.json

* Visualization

- Envisionjs with lines graph for each studied param and markers for the different GNOME releases.

Comments:   info@bitergia.com
Report URL: http://bitergia.com/public/reports/gnomeshell/commits-issues.html

* Updates

- update.sh is a proof of concept on how to update the report
